<?php
// Set Meta Tags
$this->set('title', 'Service Areas | Roofing & Siding | Archer Exteriors');
$this->set('metaDescription', 'Archer Exteriors - Service Areas');
$this->set('metaKeywords', STATIC_KEYWORDS . ', Roofing, Siding, Windows, Doors, Decks, Gutters, 8662724398, archerexteriors.com, Archer Exteriors');
$this->set('ogTitle', 'Service Areas | Roofing & Siding | Archer Exteriors');
$this->set('ogDescription', 'Archer Exteriors - Service Areas');
$this->set('ogImage', DOMAIN . '/img/archerexteriors-insignia.png?' . time());
$this->set('ogType', 'website'); // For general info pages
$this->set('ogUrl', DOMAIN . '/service-areas'); // TODO: Change to the current page URL
?>
<?php
// Load MapStatesTable directly
use Cake\ORM\TableRegistry;

// Fetch map states without using a controller
$mapStatesTable = TableRegistry::getTableLocator()->get('MapStates');
?>
<!-- Hero-section -->
<!-- Elfsight Google Maps | Archer Exteriors Branch Locations -->
<script src="https://static.elfsight.com/platform/platform.js" async></script>
<div class="elfsight-app-84c02a38-7283-40c6-ac05-f58000b7ec33" data-elfsight-app-lazy></div>
<!-- Hero-section end -->

<section class="section light">
    <div class="container">
        <div class="row gx-lg-4 gy-5">
            <div class="col-lg-7">
                <div class="sec-title">
                    <h6><i class="flaticon-roof"></i> Headquarters</h6>
                    <h2>Archer Exteriors' <br> <span>National Headquarters</span></h2>
                </div>

                <?= $this->Html->image('service-area/national-headquarters.jpg', [
                    'class' => 'img-fluid',
                    'alt' => 'National Headquarters',
                    'title' => 'National Headquarters'
                ]) ?>

                <div class="our_service service-area">
                    <div class="row justify-content-center mt-5" style="gap: 20px 0;">
                        <div class="col-lg-4 col-6">
                            <div class="item">
                                <div class="icon">
                                    <?= $this->Html->image('service-area/map-marker.svg', [
                                        'class' => 'img-fluid svg',
                                        'alt' => 'Headquarters Location'
                                    ]) ?>
                                </div>
                                <h4 class="item_title"><?= COMPANY_ADDRESS ?></h4>
                            </div>
                        </div>
                        <div class="col-lg-4 col-6">
                            <div class="item">
                                <div class="icon">
                                    <?= $this->Html->image('service-area/call.svg', [
                                        'class' => 'img-fluid svg',
                                        'alt' => 'Call'
                                    ]) ?>
                                </div>
                                <h4 class="item_title"><?= COMPANY_PHONE ?> <br> Mon-Fri: 8am- 5pm</h4>
                            </div>
                        </div>
                        <div class="col-lg-4 col-6">
                            <div class="item">
                                <div class="icon">
                                    <?= $this->Html->image('service-area/license.svg', [
                                        'class' => 'img-fluid svg',
                                        'alt' => 'License'
                                    ]) ?>
                                </div>
                                <h4 class="item_title">NJ LIC#13VH01492600 <br> PA LIC#PA082127</h4>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-5">
                <?= $this->element('form_free_estimate') ?>
            </div>
        </div>
    </div>
</section>


<section class="section" style="background: var(--secondary);">
    <div class="container">
        <div class="sec-title text-center light">
            <h6><i class="flaticon-roof"></i> Service Area</h6>
            <h2>Archer Exteriors' <span>Branch Locations</span></h2>
        </div>

        <div class="row gy-4">
            <div class="col-lg-7">
                <h4 class="text-white mb-2">Find branch by location</h4>
                <form action="">
                    <div class="find_branch">
                        <div>
                            <?= $this->Form->control('state', [
                                'class' => 'form-select',
                                'placeholder' => 'Search by State',
                                'label' => false,
                                'required' => true,
                                'type' => 'select',
                                'options' => $mapStatesIso,
                                'empty' => 'Search by State',
                                'id' => 'service-area-state-select',
                                'aria-describedby' => 'state-error',
                                'aria-invalid' => 'false',
                                'data-validation-type' => 'select'
                            ]) ?>
                        </div>
                        <div>
                            <?= $this->Form->control('county', [
                                'class' => 'form-select',
                                'placeholder' => 'Search by County',
                                'label' => false,
                                'required' => false,
                                'type' => 'select',
                                'options' => $selectedCounties,
                                'empty' => 'Search by County',
                                'id' => 'service-area-county-select',
                                'aria-describedby' => 'county-error',
                                'aria-invalid' => 'false',
                                'data-validation-type' => 'select',
                                'disabled' => true
                            ]) ?>
                        </div>
                    </div>
                </form>
            </div>

            <div class="col-lg-5">
                <h4 class="text-white mb-2">Exterior type</h4>
                <div class="find_branch">
                    <div>
                        <?= $this->Html->link(
                            $this->Html->image('service-area/icon-construction.png', [
                                'alt' => 'New Construction'
                            ]) . ' New Construction',
                            '#',
                            ['class' => 'filter_btn', 'escape' => false]
                        ) ?>
                    </div>
                    <div>
                        <?= $this->Html->link(
                            $this->Html->image('service-area/icon-remodelling.png', [
                                'alt' => 'Remodeling'
                            ]) . ' Remodeling',
                            '#',
                            ['class' => 'filter_btn', 'escape' => false]
                        ) ?>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Service Area Start  -->
<section class="section light">
    <div class="container">
        <!-- Branch List Container for AJAX updates -->
        <div id="branch-list-container">
            <?= $this->element('branch_listings') ?>
        </div>

        <!-- Loading spinner (hidden by default) -->
        <div id="pagination-loading" style="display: none; text-align: center; padding: 20px;">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Loading branches...</p>
        </div>
    </div>
</section>
<!-- Service Area End  -->

<!-- Service Types Section Start  -->
<section class="service-section">
    <?= $this->element('current_activities') ?>
</section>
<!-- Types Section End  -->

<!-- Archie Section Start  -->
<section class="archie_section">
    <?= $this->element('archie_section') ?>
</section>
<!-- Archie Section End  -->

<!-- Why Choose Us Section Start  -->
<section class="chooseus-section">
    <?= $this->element('why_choose_us') ?>
</section>
<!-- Why Choose Us Section End -->

<!-- Recent Project section Start  -->
<section class="section recent_project">
    <?= $this->element('our_recent_work') ?>
</section>
<!-- Recent Project section End  -->

<script>
    // Plain JavaScript implementation - no jQuery dependency
    //console.log('Cascading dropdown script loading...');

    // Function to initialize the cascading dropdown
    function initializeCascadingDropdown() {
        //console.log('Initializing cascading dropdown with plain JavaScript...');

        const stateSelect = document.getElementById('service-area-state-select');
        const countySelect = document.getElementById('service-area-county-select');

        //console.log('State select found:', !!stateSelect);
        //console.log('County select found:', !!countySelect);

        if (!stateSelect) {
            console.error('State select element with ID "service-area-state-select" not found!');
            //console.log('Available select elements:');
            const allSelects = document.querySelectorAll('select');
            allSelects.forEach((select, index) => {
                //console.log(`- ID: ${select.id || 'no-id'}, Name: ${select.name || 'no-name'}, Class: ${select.className}`);
            });
            return false;
        }

        if (!countySelect) {
            console.error('County select element with ID "service-area-county-select" not found!');
            return false;
        }

        // Remove any existing event listeners to prevent duplicates
        stateSelect.removeEventListener('change', handleStateChange);

        // Add event listener for state dropdown change
        stateSelect.addEventListener('change', handleStateChange);

        //console.log('Event listener attached successfully');

        // Initial state check
        if (stateSelect.value) {
            //console.log('Initial state value found, triggering change');
            handleStateChange.call(stateSelect);
        }

        return true;
    }

    // Handle state dropdown change
    function handleStateChange() {
        //console.log('State dropdown change event fired');
        const stateIso = this.value;
        const countySelect = document.getElementById('service-area-county-select');

        //console.log('Selected state ISO:', stateIso);

        if (stateIso) {
            // Show loading state
            countySelect.disabled = true;
            countySelect.innerHTML = '<option value="">Loading counties...</option>';

            //console.log('Making fetch request for counties...');

            // Make fetch request to get counties
            const url = '<?= $this->Url->build(['controller' => 'ServiceAreas', 'action' => 'getCounties']) ?>?state_iso=' + encodeURIComponent(stateIso);

            // Get CSRF token for secure requests
            const csrfToken = document.querySelector('meta[name="csrfToken"]')?.getAttribute('content');

            const headers = {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
            };

            // Add CSRF token if available
            if (csrfToken) {
                headers['X-CSRF-Token'] = csrfToken;
            }

            fetch(url, {
                    method: 'GET',
                    headers: headers
                })
                .then(response => {
                    //console.log('Response status:', response.status);
                    if (!response.ok) {
                        throw new Error('Network response was not ok: ' + response.status);
                    }
                    return response.json();
                })
                .then(data => {
                    //console.log('AJAX response:', data);

                    if (data.success && data.counties) {
                        // Clear and populate county dropdown
                        countySelect.innerHTML = '<option value="">Search by County</option>';

                        // Add county options
                        Object.entries(data.counties).forEach(([id, name]) => {
                            const option = document.createElement('option');
                            option.value = id;
                            option.textContent = name;
                            countySelect.appendChild(option);
                        });

                        // Enable county dropdown
                        countySelect.disabled = false;
                        //console.log('County dropdown populated with', Object.keys(data.counties).length, 'counties');
                    } else {
                        // Handle error
                        countySelect.innerHTML = '<option value="">Error loading counties</option>';
                        countySelect.disabled = true;
                        console.error('Error in response:', data);
                    }
                })
                .catch(error => {
                    // Handle fetch error
                    countySelect.innerHTML = '<option value="">Error loading counties</option>';
                    countySelect.disabled = true;
                    console.error('Fetch Error:', error);
                });
        } else {
            // Reset county dropdown when no state is selected
            countySelect.innerHTML = '<option value="">Search by County</option>';
            countySelect.disabled = true;
            //console.log('State cleared, county dropdown reset');
        }
    }

    // AJAX Pagination System
    function initializePagination() {
        //console.log('Initializing AJAX pagination...');

        // Use event delegation to handle clicks on pagination links
        document.addEventListener('click', function(event) {
            // Check if clicked element is a pagination link
            if (event.target.matches('.pagination-link') || event.target.closest('.pagination-link')) {
                event.preventDefault(); // Prevent default anchor behavior

                const link = event.target.matches('.pagination-link') ? event.target : event.target.closest('.pagination-link');
                const url = link.getAttribute('href');

                if (url) {
                    loadPaginatedContent(url);
                }
            }
        });

        //console.log('Pagination event listeners attached');
    }

    // Load paginated content via AJAX
    function loadPaginatedContent(url) {
        //console.log('Loading paginated content from:', url);

        // Save current scroll position
        const scrollPosition = window.pageYOffset || document.documentElement.scrollTop;

        // Dispose of existing tooltips before loading new content
        if (typeof window.bootstrap !== 'undefined' && bootstrap.Tooltip) {
            const existingTooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            existingTooltips.forEach(function(tooltipEl) {
                const existingTooltip = bootstrap.Tooltip.getInstance(tooltipEl);
                if (existingTooltip) {
                    existingTooltip.dispose();
                }
            });

            // Remove any leftover tooltip elements from the DOM
            const tooltipElements = document.querySelectorAll('.tooltip');
            tooltipElements.forEach(function(tooltip) {
                tooltip.remove();
            });
        }

        // Show loading spinner
        const branchContainer = document.getElementById('branch-list-container');
        const loadingSpinner = document.getElementById('pagination-loading');

        if (branchContainer && loadingSpinner) {
            branchContainer.style.opacity = '0.5';
            loadingSpinner.style.display = 'block';
        }

        // Parse URL to add AJAX parameter
        const urlObj = new URL(url, window.location.origin);
        urlObj.searchParams.set('ajax_pagination', '1');

        //console.log('AJAX URL:', urlObj.toString());

        // Get CSRF token for secure requests
        const csrfToken = document.querySelector('meta[name="csrfToken"]')?.getAttribute('content');
        //console.log('CSRF Token:', csrfToken ? 'present' : 'missing');

        const headers = {
            'X-Requested-With': 'XMLHttpRequest',
            'Accept': 'application/json, text/javascript, */*; q=0.01',
            'Cache-Control': 'no-cache'
        };

        // Add CSRF token if available
        if (csrfToken) {
            headers['X-CSRF-Token'] = csrfToken;
        }

        //console.log('Request headers:', headers);

        fetch(urlObj.toString(), {
                method: 'GET',
                headers: headers,
                credentials: 'same-origin' // Include cookies for session handling
            })
            .then(response => {
                //console.log('Response status:', response.status);
                //console.log('Response content-type:', response.headers.get('content-type'));

                if (!response.ok) {
                    throw new Error('Network response was not ok: ' + response.status);
                }

                // Check if response is JSON
                const contentType = response.headers.get('content-type');
                if (contentType && contentType.includes('application/json')) {
                    return response.json();
                } else {
                    // If not JSON, get text to see what we received
                    return response.text().then(text => {
                        console.error('Expected JSON but received:', text.substring(0, 200) + '...');
                        throw new Error('Expected JSON response but received: ' + contentType);
                    });
                }
            })
            .then(data => {
                //console.log('AJAX pagination response:', data);

                if (data.success && data.html) {
                    // Update the branch listings container
                    if (branchContainer) {
                        branchContainer.innerHTML = data.html;
                        branchContainer.style.opacity = '1';
                    }

                    // Hide loading spinner
                    if (loadingSpinner) {
                        loadingSpinner.style.display = 'none';
                    }

                    // Restore scroll position (or scroll to a specific position)
                    window.scrollTo(0, scrollPosition);

                    // Update the URL without reloading the page
                    const newUrl = url.split('?')[0] + (urlObj.searchParams.get('page') ? '?page=' + urlObj.searchParams.get('page') : '');
                    history.replaceState(null, '', newUrl);

                    // Re-initialize any tooltips or other components that might be in the new content
                    initializeTooltips();

                    //console.log('Pagination content updated successfully');
                } else {
                    console.error('Invalid response format or success=false:', data);
                    throw new Error(data.error || 'Invalid response format');
                }
            })
            .catch(error => {
                console.error('Pagination Error:', error);

                // Hide loading spinner
                if (loadingSpinner) {
                    loadingSpinner.style.display = 'none';
                }

                // Restore container opacity
                if (branchContainer) {
                    branchContainer.style.opacity = '1';
                }

                // Show error message with more details
                if (branchContainer) {
                    branchContainer.innerHTML = '<div class="alert alert-danger">Error loading content: ' + error.message + '. Please try again.</div>';
                }
            });
    }

    // Initialize tooltips (if using Bootstrap tooltips)
    function initializeTooltips() {
        // Check if Bootstrap tooltips are available
        if (typeof window.bootstrap !== 'undefined' && bootstrap.Tooltip) {
            // First, dispose of any existing tooltips to prevent conflicts
            const existingTooltips = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            existingTooltips.forEach(function(tooltipEl) {
                const existingTooltip = bootstrap.Tooltip.getInstance(tooltipEl);
                if (existingTooltip) {
                    existingTooltip.dispose();
                }
            });

            // Remove any leftover tooltip elements from the DOM
            const tooltipElements = document.querySelectorAll('.tooltip');
            tooltipElements.forEach(function(tooltip) {
                tooltip.remove();
            });

            // Initialize new tooltips
            const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
            tooltipTriggerList.forEach(function(tooltipTriggerEl) {
                new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', function() {
            //console.log('DOM Content Loaded');
            initializeCascadingDropdown();
            initializePagination();
            initializeTooltips();
        });
    } else {
        //console.log('DOM already ready');
        initializeCascadingDropdown();
        initializePagination();
        initializeTooltips();
    }

    // Fallback: Initialize on window load
    window.addEventListener('load', function() {
        //console.log('Window load event fired');
        initializeCascadingDropdown();
        initializePagination();
        initializeTooltips();
    });

    // Test alert to confirm script is working
    //console.log('Script setup complete');
</script>